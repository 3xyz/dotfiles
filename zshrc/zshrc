# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n] # confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

source ~/.zsh/powerlevel10k/powerlevel10k.zsh-theme
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# The following lines were added by compinstall
zstyle :compinstall filename '/home/kali/.zshrc'
autoload -Uz compinit
compinit

# ------------- compdef _gf gf
function _gf {
  _arguments "1: :($(gf -list))"
}

cpath() {
  realpath $1 && realpath $1 | head -n 1 | head -c -1 | copy
}

pack-this() {
  tar -czvf $1.tar.gz $1
}
# alias wrap_args='sh -c '\''echo before "$1" after'\'' _'

alias spidernan_recon='spidernan --skip_update -s 145678'
alias vi=vim
alias nv=nvim
alias nvim='/opt/nvim-linux64/bin/nvim'
alias avenv='source ./venv/bin/activate'
alias ai-venv='source /home/kali/Desktop/MyScripts/ai/tictactoe_self_learning/venv/bin/activate'
alias copy='xclip -sel clip'
alias sudo_kali='sudo -E env PATH=$PATH '
# alias sudo='sudo -E env PATH=$PATH '
alias aix='aix -silent -duc'
alias git-push='git add .; git commit -m "fixes"; git push origin'
alias sort-l="awk '{ print length, \$0 }' | sort -n | cut -d ' ' -f2-"
alias tree="tree -I __pycache__ -I venv"
alias xxh='xxh +s fish'

alias dockeri='docker images'
alias dockerc='docker ps -a'

alias ll='ls -lh'
alias la='ls -A'
alias l='ls -CF'

alias pagodo='pagodo -g ~/tools/pagodo/dorks/all_google_dorks.txt'

PYTHON_VENV='/home/kali/Desktop/usefull_things/venv'

setopt autocd              # change directory just by typing its name
# setopt correct             # auto correct mistakes
setopt interactivecomments # allow comments in interactive mode
setopt magicequalsubst     # enable filename expansion for arguments of the form ‘anything=expression’
setopt nonomatch           # hide error message if there is no match for the pattern
setopt notify              # report the status of background jobs immediately
setopt numericglobsort     # sort filenames numerically when it makes sense
setopt promptsubst         # enable command substitution in prompt

bindkey -e                                        # emacs key bindings
bindkey ' ' magic-space                           # do history expansion on space
bindkey '^U' backward-kill-line                   # ctrl + U
bindkey '^[[3;5~' kill-word                       # ctrl + Supr
bindkey '^[[3~' delete-char                       # delete
bindkey '^[[1;5C' forward-word                    # ctrl + ->
bindkey '^[[1;5D' backward-word                   # ctrl + <-
bindkey '^[[5~' beginning-of-buffer-or-history    # page up
bindkey '^[[6~' end-of-buffer-or-history          # page down bindkey '^[[H' beginning-of-line                  # home
bindkey '^[[F' end-of-line                        # end
bindkey '^[[Z' undo                               # shift + tab undo last action

# enable completion features
autoload -Uz compinit
compinit -d ~/.cache/zcompdump
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' rehash true
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'


# enable color support of ls, less and man, and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  export LS_COLORS="$LS_COLORS:ow=30;44:" # fix ls color for folders with 777 permissions

  alias ls='ls --color=auto'
  #alias dir='dir --color=auto'
  #alias vdir='vdir --color=auto'

  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
  alias diff='diff --color=auto'
  alias ip='ip --color=auto'

  export LESS_TERMCAP_mb=$'\E[1;31m'     # begin blink
  export LESS_TERMCAP_md=$'\E[1;36m'     # begin bold
  export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
  export LESS_TERMCAP_so=$'\E[01;33m'    # begin reverse video
  export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
  export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
  export LESS_TERMCAP_ue=$'\E[0m'        # reset underline

  # Take advantage of $LS_COLORS for completion as well
  zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
  zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
fi

# initialize autocompletion
autoload -U compinit

# History configurations
# history setup
setopt APPEND_HISTORY
setopt SHARE_HISTORY
HISTFILE=$HOME/.zsh_history
SAVEHIST=100000
HISTSIZE=100000
setopt INC_APPEND_HISTORY # Append to history immediately
setopt HIST_SAVE_NO_DUPS
setopt EXTENDED_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt HIST_IGNORE_DUPS       # ignore duplicated commands history list
setopt HIST_IGNORE_SPACE      # ignore commands that start with space
setopt HIST_VERIFY            # show command with history expansion to user before running it
setopt share_history          # share command history data

# autocompletion using arrow keys (based on history)
bindkey '\e[A' history-search-backward
bindkey '\e[B' history-search-forward

# GENERAL

# (bonus: Disable sound errors in Zsh)

# never beep
setopt NO_BEEP

# enable auto-suggestions based on the history
if [ -f ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
  . ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh    # change suggestion color
  ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#999999"
fi

if [ -f ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
   . ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
   ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
   ZSH_HIGHLIGHT_STYLES[default]=none
   ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=white,underline
   ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=cyan,bold
   ZSH_HIGHLIGHT_STYLES[suffix-alias]=fg=green,underline
   ZSH_HIGHLIGHT_STYLES[global-alias]=fg=green,bold
   ZSH_HIGHLIGHT_STYLES[precommand]=fg=green,underline
   ZSH_HIGHLIGHT_STYLES[commandseparator]=fg=blue,bold
   ZSH_HIGHLIGHT_STYLES[autodirectory]=fg=green,underline
   ZSH_HIGHLIGHT_STYLES[path]=bold
   ZSH_HIGHLIGHT_STYLES[path_pathseparator]=
   ZSH_HIGHLIGHT_STYLES[path_prefix_pathseparator]=
   ZSH_HIGHLIGHT_STYLES[globbing]=fg=blue,bold
   ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=blue,bold
   ZSH_HIGHLIGHT_STYLES[command-substitution]=none
   ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter]=fg=magenta,bold
   ZSH_HIGHLIGHT_STYLES[process-substitution]=none
   ZSH_HIGHLIGHT_STYLES[process-substitution-delimiter]=fg=magenta,bold
   ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=fg=green
   ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=fg=green
   ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
   ZSH_HIGHLIGHT_STYLES[back-quoted-argument-delimiter]=fg=blue,bold
   ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=yellow
   ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=yellow
   ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]=fg=yellow
   ZSH_HIGHLIGHT_STYLES[rc-quote]=fg=magenta
   ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=magenta,bold
   ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=magenta,bold
   ZSH_HIGHLIGHT_STYLES[back-dollar-quoted-argument]=fg=magenta,bold
   ZSH_HIGHLIGHT_STYLES[assign]=none
   ZSH_HIGHLIGHT_STYLES[redirection]=fg=blue,bold
   ZSH_HIGHLIGHT_STYLES[comment]=fg=black,bold
   ZSH_HIGHLIGHT_STYLES[named-fd]=none
   ZSH_HIGHLIGHT_STYLES[numeric-fd]=none
   ZSH_HIGHLIGHT_STYLES[arg0]=fg=cyan
   ZSH_HIGHLIGHT_STYLES[bracket-error]=fg=red,bold
   ZSH_HIGHLIGHT_STYLES[bracket-level-1]=fg=blue,bold
   ZSH_HIGHLIGHT_STYLES[bracket-level-2]=fg=green,bold
   ZSH_HIGHLIGHT_STYLES[bracket-level-3]=fg=magenta,bold
   ZSH_HIGHLIGHT_STYLES[bracket-level-4]=fg=yellow,bold
   ZSH_HIGHLIGHT_STYLES[bracket-level-5]=fg=cyan,bold
   ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]=standout
fi

if [ -f ~/.zsh/zsh_command_not_found.zsh ]; then
  . ~/.zsh/zsh_command_not_found.zsh
fi

if [[ -f ~/.zsh/fzf-zsh-plugin/fzf-zsh-plugin.plugin.zsh ]]; then
  source ~/.zsh/fzf-zsh-plugin/fzf-zsh-plugin.plugin.zsh
fi

if [[ -f ~/.zsh/zsh-z.plugin.zsh ]]; then
  source ~/.zsh/zsh-z.plugin.zsh 
fi

if [[ -f "$PYTHON_VENV/bin/activate" ]]; then
  source "$PYTHON_VENV/bin/activate"
fi

export CENSYS_API_ID="39022825-3212-4f53-b799-d6411d3af2f8"
export CENSYS_API_SECRET="KhYX7JTFHO4DQ6JUqvZN429IiyjTwTKq"

export EDITOR="/usr/local/bin/nvim"

# export PATH="$PATH:/home/kali/pentest_utils"
# export PATH="$PATH:/home/kali/venvs"
# export PATH="$PATH:/home/kali/.local/bin"
# export PATH="$PATH:/opt/go/bin"
# export PATH="$PATH:/home/kali/.local/share/nvim/mason/bin"
# export PATH="$PATH:/opt/python3.9/bin"
# export PATH="$PATH:/home/kali/go/bin"
# export PATH="$PATH:/home/kali/.pdtm/go/bin"

export PATH="/home/kali/pentest_utils:$PATH"
export PATH="/home/kali/venvs:$PATH"
export PATH="/home/kali/.local/bin:$PATH"
export PATH="/opt/go/bin:$PATH"
export PATH="/home/kali/.local/share/nvim/mason/bin:$PATH"
export PATH="/opt/python3.9/bin:$PATH"
export PATH="/home/kali/go/bin:$PATH"
export PATH="/home/kali/.pdtm/go/bin:$PATH"
